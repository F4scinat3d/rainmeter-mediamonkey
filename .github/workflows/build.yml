name: build

on:
  workflow_dispatch:
  pull_request:
  push:
    branches: 
      - main
      - 'dependabot/**'

env:
  version: "2.0.2.${{ github.run_number }}${{ github.run_attempt }}"
  build_configuration: "Release"
  build_platform: "x64"

jobs:

  build:
    runs-on: windows-latest
    timeout-minutes: 10
    outputs:
      version: ${{ steps.set-version.outputs.VERSION }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Setup msbuild
      uses: microsoft/setup-msbuild@v1

    - name: Update Assembly Version
      shell: pwsh
      run: |
        $NewVersion = 'AssemblyVersion("${{ env.version }}")'
        $tmpFile = New-TemporaryFile
        $assemblyInfoPath = "${{ github.workspace }}/PluginMediaMonkey/AssemblyInfo.cs"
        (Get-Content -Path $assemblyInfoPath -Encoding utf8) -replace 'AssemblyVersion\(".*"\)', $NewVersion | Set-Content -Path $tmpFile -Encoding utf8
        Move-Item -Path $tmpFile -Destination $assemblyInfoPath -Force

    - name: Restore Packages
      shell: pwsh
      run: nuget restore MediaMonkey-Rainmeter.sln

    - name: Build x64
      shell: pwsh
      run: |
        msbuild.exe MediaMonkey-Rainmeter.sln /t:Build /nologo /nr:false /p:Version=${{ env.version }} /p:platform="x64" /p:configuration="${{ env.build_configuration }}"
    
    - name: Build x86
      shell: pwsh
      run: |
        msbuild.exe MediaMonkey-Rainmeter.sln /t:Build /nologo /nr:false /p:Version=${{ env.version }} /p:platform="x86" /p:configuration="${{ env.build_configuration }}"

    - name: Move Artifacts
      shell: pwsh
      run: |
        New-Item -Path "${{ github.workspace }}/deploy/x64" -Type Directory
        Move-Item -Path "${{ github.workspace }}/PluginMediaMonkey/x64/${{ env.build_configuration }}/*" -Destination "${{ github.workspace }}/deploy/x64" -Force
        
        New-Item -Path "${{ github.workspace }}/deploy/x32" -Type Directory
        Move-Item -Path "${{ github.workspace }}/PluginMediaMonkey/x32/${{ env.build_configuration }}/*" -Destination "${{ github.workspace }}/deploy/x32" -Force

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build
        path: ${{ github.workspace }}/Deploy
        
    - name: Move Release Artifacts
      shell: pwsh
      run: |
        New-Item -Path "${{ github.workspace }}/publish/x64" -Type Directory
        Move-Item -Path "${{ github.workspace }}/deploy/x64/MediaMonkey.dll" -Destination "${{ github.workspace }}/publish/x64" -Force
        
        New-Item -Path "${{ github.workspace }}/publish/x86" -Type Directory
        Move-Item -Path "${{ github.workspace }}/deploy/x32/MediaMonkey.dll" -Destination "${{ github.workspace }}/publish/x86" -Force

    - name: Zip Release Artifacts
      run: Compress-Archive -Path "${{ github.workspace }}/publish/*" -DestinationPath "${{ github.workspace }}/publish/rainmeter-mediamonkey.v${{ env.version }}.zip"
    
    - name: Upload release artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release
        path: ${{ github.workspace }}/publish/rainmeter-mediamonkey.v${{ env.version }}.zip

  release:
    runs-on: windows-latest
    needs: build

    steps:
    - name: Get plugin - x64
      uses: actions/download-artifact@v3
      with:
        name: release
        path: ${{ github.workspace }}/publish/
        
    - name: Create Release
      uses: actions/github-script@v5
      if: ${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/main' }}
      with:
        script: |
          github.rest.git.createRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: 'refs/tags/${{ needs.build.outputs.version }}',
            sha: context.sha
          })

    - name: Create Release
      uses: actions/create-release@v6
      if: ${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/main' }}
      id: create_release
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
      with:
        tag_name: ${{ github.run_id }}
        release_name: Release ${{ github.run_id }}
        draft: false
        prerelease: false
        
        
    - name: "Create release"
      uses: actions/github-script@v6
      if: ${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/main' }}
      with:
        github-token: "${{ secrets.ERGEBNIS_BOT_TOKEN }}"
        script: |
          try {
            await github.rest.repos.createRelease({
              draft: false,
              generate_release_notes: true,
              name: process.env.RELEASE_TAG,
              owner: context.repo.owner,
              prerelease: false,
              repo: context.repo.repo,
              tag_name: process.env.RELEASE_TAG,
            });
          } catch (error) {
            core.setFailed(error.message);
          }

        
    - name: Upload Release Asset
      id: upload-release-asset 
      if: ${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/main' }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ github.workspace }}/publish/rainmeter-mediamonkey.v${{ env.version }}.zip 
        asset_name: AnidbExportParser.zip
        asset_content_type: application/zip
